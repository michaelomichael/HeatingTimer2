<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Test3 (deleteme).axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Test3 (deleteme).axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sat Jan 03 10:56:05 2015
<BR><P>
<H3>Maximum Stack Usage =        276 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; setup() &rArr; synchroniseWithInternet(bool) &rArr; HeatingESP8266::sendHttpRequest(const char*, unsigned long) &rArr; ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[a7]">Print::print(long, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">Print::print(char, int)</a><BR>
 <LI><a href="#[a5]">Print::printNumber(unsigned long, unsigned char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">Print::print(char, int)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[23]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[12]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[c]">EXTI0_1_IRQHandler</a> from delay.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[d]">EXTI2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[e]">EXTI4_15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[8]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[b]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[9]">RTC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2c]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[14]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">TIM2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">TIM3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[18]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[f]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from hardwareserial.o(i.USART1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from hardwareserial.o(i.USART2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[7]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[28]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[29]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[2b]">__sti___18_HardwareSerial_cpp</a> from hardwareserial.o(i.__sti___18_HardwareSerial_cpp) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[2a]">__sti___8_main_cpp</a> from main.o(i.__sti___8_main_cpp) referenced from main.o(.init_array)
 <LI><a href="#[27]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[24]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[30]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[bd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[be]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isWithinWindow(char, char)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::checkForStringInBuffer(const char*, const char*, int, int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::addToBuffer(char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite(int, int)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[85]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
</UL>

<P><STRONG><a name="[ab]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::checkForStringInBuffer(const char*, const char*, int, int)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendToServer(char*, char*, char*, char*, unsigned)
</UL>

<P><STRONG><a name="[9f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
</UL>

<P><STRONG><a name="[2d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[89]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[c6]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[45]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[b8]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[cb]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[39]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>ADC_AutoPowerOffCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_AutoPowerOffCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[64]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[68]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[4c]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[65]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[59]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead(int)
</UL>

<P><STRONG><a name="[69]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[63]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[6b]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[66]"></a>ADC_WaitModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_WaitModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, delay.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[9c]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[5b]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[5d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[53]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[5c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[4d]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[50]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[73]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[52]"></a>TIM_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[6f]"></a>TIM_OC1Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[70]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[6d]"></a>TIM_OC2Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[6e]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[74]"></a>TIM_OC4Init</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[71]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[60]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[72]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[62]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[61]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[5f]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
</UL>

<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hardwareserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; store_char(unsigned char, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_char(unsigned char, RingBuffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hardwareserial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; store_char(unsigned char, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_char(unsigned char, RingBuffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[54]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>USART_ITConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[57]"></a>USART_Init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[55]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[58]"></a>analogRead(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, orz.o(i._Z10analogReadi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analogRead(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[5a]"></a>setPinMode(int, int)</STRONG> (Thumb, 772 bytes, Stack size 96 bytes, orz.o(i._Z10setPinModeii))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setPinMode(int, int) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WaitModeCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AutoPowerOffCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[56]"></a>store_char(unsigned char, RingBuffer*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hardwareserial.o(i._Z10store_charhP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_char(unsigned char, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>millisSince(unsigned long)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, orz.o(i._Z11millisSincem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = millisSince(unsigned long) &rArr; millis &rArr; initialiseOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[8e]"></a>base64Encode(char*, char*, int)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, main.o(i._Z12base64EncodePcS_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = base64Encode(char*, char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[77]"></a>digitalWrite(int, int)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, orz.o(i._Z12digitalWriteii))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = digitalWrite(int, int) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[78]"></a>updateRelays()</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, main.o(i._Z12updateRelaysv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = updateRelays() &rArr; debug(char*) &rArr; Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite(int, int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millisSince(unsigned long)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isWithinWindow(char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[7b]"></a>isWithinWindow(char, char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i._Z14isWithinWindowcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = isWithinWindow(char, char) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[81]"></a>parseHeatingInfo(char*)</STRONG> (Thumb, 684 bytes, Stack size 112 bytes, main.o(i._Z16parseHeatingInfoPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = parseHeatingInfo(char*) &rArr; Print::println(unsigned char, int) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[88]"></a>sampleTemperature()</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, main.o(i._Z17sampleTemperaturev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sampleTemperature() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead(int)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[8c]"></a>synchroniseWithInternet(bool)</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, main.o(i._Z23synchroniseWithInternetb))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = synchroniseWithInternet(bool) &rArr; HeatingESP8266::sendHttpRequest(const char*, unsigned long) &rArr; ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::softReset()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::hardReset()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::getHttpBody()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Encode(char*, char*, int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[93]"></a>loop()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = loop() &rArr; synchroniseWithInternet(bool) &rArr; HeatingESP8266::sendHttpRequest(const char*, unsigned long) &rArr; ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millisSince(unsigned long)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>debug(char*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i._Z5debugPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = debug(char*) &rArr; Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[97]"></a>setup()</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, main.o(i._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = setup() &rArr; synchroniseWithInternet(bool) &rArr; HeatingESP8266::sendHttpRequest(const char*, unsigned long) &rArr; ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::begin(HardwareSerial*, HardwareSerial*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(long)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite(int, int)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPinMode(int, int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>initUSART(USART_TypeDef*, unsigned)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, hardwareserial.o(i._Z9initUSARTP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = initUSART(USART_TypeDef*, unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(long)
</UL>

<P><STRONG><a name="[ad]"></a>HardwareSerial::read()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
</UL>

<P><STRONG><a name="[98]"></a>HardwareSerial::begin(long)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HardwareSerial::begin(long) &rArr; initUSART(USART_TypeDef*, unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUSART(USART_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[96]"></a>HardwareSerial::flush()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5flushEv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
</UL>

<P><STRONG><a name="[28]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[ae]"></a>HardwareSerial::available()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
</UL>

<P><STRONG><a name="[b3]"></a>HardwareSerial::HardwareSerial(int)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1Ei))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_HardwareSerial_cpp
</UL>

<P><STRONG><a name="[cd]"></a>HardwareSerial::HardwareSerial__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1Ei), UNUSED)

<P><STRONG><a name="[91]"></a>HeatingESP8266::getHttpBody()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heatingesp8266.o(i._ZN14HeatingESP826611getHttpBodyEv))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[8d]"></a>HeatingESP8266::sendHttpRequest(const char*, unsigned long)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, heatingesp8266.o(i._ZN14HeatingESP826615sendHttpRequestEPKcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = HeatingESP8266::sendHttpRequest(const char*, unsigned long) &rArr; ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::closeServerConnection()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendToServer(char*, char*, char*, char*, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::connectToAP(const char*, const char*, unsigned)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[99]"></a>HeatingESP8266::begin(HardwareSerial*, HardwareSerial*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, heatingesp8266.o(i._ZN14HeatingESP82665beginEP14HardwareSerialS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HeatingESP8266::begin(HardwareSerial*, HardwareSerial*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::init(HardwareSerial*, HardwareSerial*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[90]"></a>HeatingESP8266::hardReset()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heatingesp8266.o(i._ZN14HeatingESP82669hardResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[92]"></a>HeatingESP8266::softReset()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heatingesp8266.o(i._ZN14HeatingESP82669softResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
</UL>

<P><STRONG><a name="[b4]"></a>HeatingESP8266::HeatingESP8266()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heatingesp8266.o(i._ZN14HeatingESP8266C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[ce]"></a>HeatingESP8266::HeatingESP8266__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, heatingesp8266.o(i._ZN14HeatingESP8266C1Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, print.o(i._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char, int)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[7c]"></a>Print::print(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendPartialCommand(const char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[a6]"></a>Print::print(char, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEci))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[83]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, int)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
</UL>

<P><STRONG><a name="[7d]"></a>Print::print(int, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[95]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
</UL>

<P><STRONG><a name="[a7]"></a>Print::print(long, int)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>

<P><STRONG><a name="[7f]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[29]"></a>Print::write(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[87]"></a>Print::println(const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
</UL>

<P><STRONG><a name="[86]"></a>Print::println(unsigned char, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(i._ZN5Print7printlnEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Print::println(unsigned char, int) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
</UL>

<P><STRONG><a name="[7e]"></a>Print::println(int, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(i._ZN5Print7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Print::println(int, int) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[80]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(i._ZN5Print7printlnEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Print::println(unsigned, int) &rArr; Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[84]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Print::println() &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
</UL>

<P><STRONG><a name="[a8]"></a>ESP8266::addToBuffer(char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, esp8266.o(i._ZN7ESP826611addToBufferEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ESP8266::addToBuffer(char) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
</UL>

<P><STRONG><a name="[a0]"></a>ESP8266::connectToAP(const char*, const char*, unsigned)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, esp8266.o(i._ZN7ESP826611connectToAPEPKcS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ESP8266::connectToAP(const char*, const char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendPartialCommand(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
</UL>

<P><STRONG><a name="[a1]"></a>ESP8266::sendToServer(char*, char*, char*, char*, unsigned)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, esp8266.o(i._ZN7ESP826612sendToServerEPcS0_S0_S0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendPartialCommand(const char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
</UL>

<P><STRONG><a name="[a2]"></a>ESP8266::readServerResponse(char*, int, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, esp8266.o(i._ZN7ESP826618readServerResponseEPcij))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ESP8266::readServerResponse(char*, int, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char, int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millisSince(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
</UL>

<P><STRONG><a name="[aa]"></a>ESP8266::sendPartialCommand(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, esp8266.o(i._ZN7ESP826618sendPartialCommandEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESP8266::sendPartialCommand(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendToServer(char*, char*, char*, char*, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::connectToAP(const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[a3]"></a>ESP8266::closeServerConnection()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, esp8266.o(i._ZN7ESP826621closeServerConnectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ESP8266::closeServerConnection() &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::sendHttpRequest(const char*, unsigned long)
</UL>

<P><STRONG><a name="[a9]"></a>ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, esp8266.o(i._ZN7ESP826621sendCommandAndWaitForEPKcS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendPartialCommand(const char*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::closeServerConnection()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendToServer(char*, char*, char*, char*, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::connectToAP(const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[b0]"></a>ESP8266::checkForStringInBuffer(const char*, const char*, int, int)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, esp8266.o(i._ZN7ESP826622checkForStringInBufferEPKcS1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ESP8266::checkForStringInBuffer(const char*, const char*, int, int) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
</UL>

<P><STRONG><a name="[a4]"></a>ESP8266::init(HardwareSerial*, HardwareSerial*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp8266.o(i._ZN7ESP82664initEP14HardwareSerialS1_))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::begin(HardwareSerial*, HardwareSerial*)
</UL>

<P><STRONG><a name="[af]"></a>ESP8266::waitFor(const char*, unsigned)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, esp8266.o(i._ZN7ESP82667waitForEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char, int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::checkForStringInBuffer(const char*, const char*, int, int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::addToBuffer(char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millisSince(unsigned long)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[b1]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[ac]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::sendToServer(char*, char*, char*, char*, unsigned)
</UL>

<P><STRONG><a name="[49]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b9]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[7a]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, delay.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay &rArr; delayMicroseconds &rArr; initialiseOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>

<P><STRONG><a name="[b5]"></a>delayMicroseconds</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, delay.o(i.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delayMicroseconds &rArr; initialiseOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialiseOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[b6]"></a>initialiseOnce</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, delay.o(i.initialiseOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initialiseOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, logf.o(i.logf), UNUSED)

<P><STRONG><a name="[8a]"></a>logf</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
</UL>

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = main &rArr; setup() &rArr; synchroniseWithInternet(bool) &rArr; HeatingESP8266::sendHttpRequest(const char*, unsigned long) &rArr; ESP8266::sendToServer(char*, char*, char*, char*, unsigned) &rArr; ESP8266::sendCommandAndWaitFor(const char*, const char*, unsigned) &rArr; ESP8266::waitFor(const char*, unsigned) &rArr; Print::print(char, int) &rArr; Print::print(long, int) &rArr;  Print::print(char, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>micros</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = micros &rArr; initialiseOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialiseOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(char*)
</UL>

<P><STRONG><a name="[76]"></a>millis</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(i.millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = millis &rArr; initialiseOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialiseOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::waitFor(const char*, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266::readServerResponse(char*, int, unsigned)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millisSince(unsigned long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroniseWithInternet(bool)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTemperature()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseHeatingInfo(char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelays()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__sti___8_main_cpp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___8_main_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingESP8266::HeatingESP8266()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[51]"></a>SetSysClock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>__sti___18_HardwareSerial_cpp</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, hardwareserial.o(i.__sti___18_HardwareSerial_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___18_HardwareSerial_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[b7]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, delay.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialiseOnce
</UL>

<P><STRONG><a name="[b2]"></a>_printf_core</STRONG> (Thumb, 326 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
